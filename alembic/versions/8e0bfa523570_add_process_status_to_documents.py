"""add_process_status_to_documents

Revision ID: 8e0bfa523570
Revises: 3f9c6f6e03d6
Create Date: 2025-10-16 23:03:43.218057

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8e0bfa523570'
down_revision: Union[str, Sequence[str], None] = '3f9c6f6e03d6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tenant_members')
    op.drop_index(op.f('ix_tenants_member_count'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_owner_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_status'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_table('file2document')
    
    # 创建枚举类型
    processstatus_enum = sa.Enum('INIT', 'CHUNKING', 'RAPTORING', 'GRAPHING', 'PARSED', 'FAILED', name='processstatus')
    processstatus_enum.create(op.get_bind())
    
    op.add_column('documents', sa.Column('process_status', processstatus_enum, nullable=True, comment='文档处理状态'))
    op.alter_column('documents', 'parser_config',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_comment='解析器配置(JSON)',
               existing_nullable=True,
               postgresql_using='parser_config::json')
    op.alter_column('knowledgebase', 'page_rank',
               existing_type=sa.INTEGER(),
               comment='页面排名算法强度，0表示禁用，1-100表示启用且强度递增',
               existing_comment='页面排名',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('knowledgebase', 'page_rank',
               existing_type=sa.INTEGER(),
               comment='页面排名',
               existing_comment='页面排名算法强度，0表示禁用，1-100表示启用且强度递增',
               existing_nullable=True)
    op.alter_column('documents', 'parser_config',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_comment='解析器配置(JSON)',
               existing_nullable=True)
    op.drop_column('documents', 'process_status')
    
    # 删除枚举类型
    processstatus_enum = sa.Enum('INIT', 'CHUNKING', 'RAPTORING', 'GRAPHING', 'PARSED', 'FAILED', name='processstatus')
    processstatus_enum.drop(op.get_bind())
    op.create_table('file2document',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='关联ID'),
    sa.Column('file_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='文件ID'),
    sa.Column('document_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='文档ID'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('file2document_document_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('file2document_pkey'))
    )
    op.create_table('tenants',
    sa.Column('id', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False, comment='租户名称'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='租户描述'),
    sa.Column('owner_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='租户Owner用户ID'),
    sa.Column('member_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='租户成员数量'),
    sa.Column('status', sa.VARCHAR(length=1), autoincrement=False, nullable=False, comment='状态(0:无效, 1:有效)'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_tenants_status'), 'tenants', ['status'], unique=False)
    op.create_index(op.f('ix_tenants_owner_id'), 'tenants', ['owner_id'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=False)
    op.create_index(op.f('ix_tenants_member_count'), 'tenants', ['member_count'], unique=False)
    op.create_table('tenant_members',
    sa.Column('tenant_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='用户ID'),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='加入时间'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('tenant_members_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tenant_id', 'user_id', name=op.f('tenant_members_pkey'))
    )
    # ### end Alembic commands ###
